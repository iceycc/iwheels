{"version":3,"file":"index.js","sources":["../../../../node_modules/methods/index.js","../lib/Test.js","../lib/TestAgent.js","../lib/index.js"],"sourcesContent":["/*!\n * methods\n * Copyright(c) 2013-2014 TJ Holowaychuk\n * Copyright(c) 2015-2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar http = require('http');\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = getCurrentNodeMethods() || getBasicNodeMethods();\n\n/**\n * Get the current Node.js methods.\n * @private\n */\n\nfunction getCurrentNodeMethods() {\n  return http.METHODS && http.METHODS.map(function lowerCaseMethod(method) {\n    return method.toLowerCase();\n  });\n}\n\n/**\n * Get the \"basic\" Node.js methods, a snapshot from Node.js 0.10.\n * @private\n */\n\nfunction getBasicNodeMethods() {\n  return [\n    'get',\n    'post',\n    'put',\n    'head',\n    'delete',\n    'options',\n    'trace',\n    'copy',\n    'lock',\n    'mkcol',\n    'move',\n    'purge',\n    'propfind',\n    'proppatch',\n    'unlock',\n    'report',\n    'mkactivity',\n    'checkout',\n    'merge',\n    'm-search',\n    'notify',\n    'subscribe',\n    'unsubscribe',\n    'patch',\n    'search',\n    'connect'\n  ];\n}\n","import http from 'http'\nimport https from 'https'\nimport assert from 'assert'\nimport {Request} from 'superagent'\nimport util from 'util'\n\n// 包裹原函数，提供更优雅的报错堆栈\nfunction wrapAssertFn(assertFn) {\n    // 保留最后 3 行\n    const savedStack = new Error().stack.split('\\n').slice(3)\n\n    return function (res) {\n        const err = assertFn(res)\n        if (err instanceof Error && err.stack) {\n            // 去掉第 1 行\n            const badStack = err.stack.replace(err.message, '').split('\\n').slice(1)\n            err.stack = [err.toString()]\n                .concat(savedStack)\n                .concat('--------')\n                .concat(badStack)\n                .join('\\n')\n        }\n\n        return err\n    }\n}\n\n// 优化错误展示内容\nfunction error(msg, expected, actual) {\n    const err = new Error(msg)\n    err.expected = expected\n    err.actual = actual\n    err.showDiff = true\n    return err\n}\n\nclass Test extends Request {\n    // 初始化\n    constructor(app, method, path) {\n        super(method.toUpperCase(), path)\n\n        this.redirects(0) // 禁止重定向\n        this.app = app // app/string\n        this.url = typeof app === 'string' ? app + path : this.serverAddress(app, path) // 请求路径\n        this._asserts = [] // Assertion 队列\n    }\n\n    // 通过 app 获取请求路径\n    serverAddress(app, path) {\n        if (!app.address()) {\n            this._server = app.listen(0) // 内部 server\n        }\n\n        const port = app.address().port\n        const protocol = app instanceof https.Server ? 'https' : 'http'\n        return `${protocol}://127.0.0.1:${port}${path}`\n    }\n\n    /**\n     *   .expect(200)\n     *   .expect(200, fn)\n     *   .expect(200, body)\n     *   .expect('Some body')\n     *   .expect('Some body', fn)\n     *   .expect('Content-Type', 'application/json')\n     *   .expect('Content-Type', 'application/json', fn)\n     *   .expect(fn)\n     */\n    expect(a, b, c) {\n        // 回调\n        if (typeof a === 'function') {\n            this._asserts.push(wrapAssertFn(a))\n            return this\n        }\n        if (typeof b === 'function') this.end(b)\n        if (typeof c === 'function') this.end(c)\n\n        // 状态码\n        if (typeof a === 'number') {\n            this._asserts.push(wrapAssertFn(this._assertStatus.bind(this, a)))\n            // body\n            if (typeof b !== 'function' && arguments.length > 1) {\n                this._asserts.push(wrapAssertFn(this._assertBody.bind(this, b)))\n            }\n            return this\n        }\n\n        // header\n        if (typeof b === 'string' || typeof b === 'number' || b instanceof RegExp) {\n            this._asserts.push(wrapAssertFn(this._assertHeader.bind(this, {name: '' + a, value: b})))\n            return this\n        }\n\n        // body\n        this._asserts.push(wrapAssertFn(this._assertBody.bind(this, a)))\n\n        return this\n    }\n\n    // 汇总所有 Assertion 结果\n    end(fn) {\n        const self = this\n        const server = this._server\n        const end = Request.prototype.end\n\n        end.call(this, function (err, res) {\n            if (server && server._handle) return server.close(localAssert)\n\n            localAssert()\n\n            function localAssert() {\n                self.assert(err, res, fn)\n            }\n        })\n\n        return this\n    }\n\n    // 执行所有 Assertion\n    assert(resError, res, fn) {\n        // 通用网络错误\n        const sysErrors = {\n            ECONNREFUSED: 'Connection refused',\n            ECONNRESET: 'Connection reset by peer',\n            EPIPE: 'Broken pipe',\n            ETIMEDOUT: 'Operation timed out'\n        }\n\n        let errorObj = null\n\n        // 处理返回的错误\n        if (!res && resError) {\n            if (resError instanceof Error && resError.syscall === 'connect' && sysErrors[resError.code]) {\n                errorObj = new Error(resError.code + ': ' + sysErrors[resError.code])\n            } else {\n                errorObj = resError\n            }\n        }\n\n        // 执行所有 Assertion\n        for (let i = 0; i < this._asserts.length && !errorObj; i++) {\n            errorObj = this._assertFunction(this._asserts[i], res)\n        }\n\n        // 处理 superagent 的错误\n        if (!errorObj && resError instanceof Error && (!res || resError.status !== res.status)) {\n            errorObj = resError\n        }\n\n        fn.call(this, errorObj || null, res)\n    }\n\n    // 判断当前状态码是否相等\n    _assertStatus(status, res) {\n        if (status !== res.status) {\n            const expectStatusContent = http.STATUS_CODES[status]\n            const actualStatusContent = http.STATUS_CODES[res.status]\n            return new Error('expected ' + status + ' \"' + expectStatusContent + '\", got ' + res.status + ' \"' + actualStatusContent + '\"')\n        }\n    }\n\n    // 判断当前 body 是否相等\n    _assertBody(body, res) {\n        const isRegExp = body instanceof RegExp\n\n        if (typeof body === 'object' && !isRegExp) { // 普通 body 的对比\n            try {\n                assert.deepStrictEqual(body, res.body)\n            } catch (err) {\n                const expectBody = util.inspect(body)\n                const actualBody = util.inspect(res.body)\n                return error('expected ' + expectBody + ' response body, got ' + actualBody, body, res.body)\n            }\n        } else if (body !== res.text) { // 普通文本内容的对比\n            const expectBody = util.inspect(body)\n            const actualBody = util.inspect(res.text)\n\n            if (isRegExp) {\n                if (!body.test(res.text)) { // body 是正则表达式的情况\n                    return error('expected body ' + actualBody + ' to match ' + body, body, res.body)\n                }\n            } else {\n                return error(`expected ${expectBody} response body, got ${actualBody}`, body, res.body)\n            }\n        }\n    }\n\n    // 判断当前 header 是否相等\n    _assertHeader(header, res) {\n        const field = header.name\n        const actualValue = res.header[field.toLowerCase()]\n        const expectValue = header.value\n\n        // field 不存在\n        if (typeof actualValue === 'undefined') {\n            return new Error('expected \"' + field + '\" header field')\n        }\n        // 相等的情况\n        if ((Array.isArray(actualValue) && actualValue.toString() === expectValue) || actualValue === expectValue) {\n            return\n        }\n        // 检查正则的情况\n        if (expectValue instanceof RegExp) {\n            if (!expectValue.test(actualValue)) {\n                return new Error('expected \"' + field + '\" matching ' + expectValue + ', got \"' + actualValue + '\"')\n            }\n        } else {\n            return new Error('expected \"' + field + '\" of \"' + expectValue + '\", got \"' + actualValue + '\"')\n        }\n    }\n\n    // 执行单个 Assertion\n    _assertFunction(fn, res) {\n        let err\n        try {\n            err = fn(res)\n        } catch (e) {\n            err = e\n        }\n        if (err instanceof Error) return err\n    }\n}\n\nexport default Test\n","import http from 'http'\nimport methods from 'methods'\nimport {agent as Agent} from 'superagent'\n\nimport Test from './Test'\n\nclass TestAgent extends Agent {\n    // 初始化\n    constructor(app, options) {\n        super()\n\n        // 创建服务器\n        if (typeof app === 'function') {\n            app = http.createServer(app)\n        }\n\n        // https\n        if (options) {\n            this._ca = options.ca\n            this._key = options.key\n            this._cert = options.cert\n        }\n\n        // 使用 superagent 的代理\n        Agent.call(this)\n        this.app = app\n    }\n\n    // host 函数\n    host(host) {\n        this._host = host\n        return this\n    }\n\n    // 重用 delete\n    del(...args) {\n        this.delete(args)\n    }\n}\n\n// 重写 http 的 restful method\nmethods.forEach(function (method) {\n    TestAgent.prototype[method] = function (url, fn) {\n        // 初始化请求\n        const req = new Test(this.app, method.toLowerCase(), url)\n\n        // https\n        req.ca(this._ca)\n        req.key(this._key)\n        req.cert(this._cert)\n\n        // host\n        if (this._host) {\n            req.set('host', this._host)\n        }\n\n        // http 返回时保存 Cookie\n        req.on('response', this._saveCookies.bind(this))\n        // 重定向除了保存 Cookie，同时附带上 Cookie\n        req.on('redirect', this._saveCookies.bind(this))\n        req.on('redirect', this._attachCookies.bind(this))\n\n        // 本次请求就带上 Cookie\n        this._attachCookies(req)\n        this._setDefaults(req)\n\n        return req\n    }\n})\n\nexport default TestAgent\n","import methods from 'methods'\nimport http from 'http'\nimport TestAgent from './TestAgent'\nimport Test from './Test'\n\nfunction request(app) {\n    const obj = {}\n\n    if (typeof app === 'function') {\n        app = http.createServer(app)\n    }\n\n    methods.forEach(function(method) {\n        obj[method] = function(url) {\n            return new Test(app, method, url)\n        }\n    })\n\n    obj.del = obj.delete\n\n    return obj\n}\n\nrequest.agent = TestAgent\n\nexport default request\n"],"names":["http","require$$0","methods","METHODS","map","method","toLowerCase","wrapAssertFn","assertFn","savedStack","Error","stack","split","slice","res","err","badStack","replace","message","toString","concat","join","error","msg","expected","actual","showDiff","Test","Request","constructor","app","path","toUpperCase","redirects","url","this","serverAddress","_asserts","address","_server","listen","port","https","Server","expect","a","b","c","push","end","_assertStatus","bind","arguments","length","_assertBody","RegExp","_assertHeader","name","value","fn","self","server","prototype","call","_handle","close","localAssert","assert","resError","sysErrors","ECONNREFUSED","ECONNRESET","EPIPE","ETIMEDOUT","errorObj","syscall","code","i","_assertFunction","status","expectStatusContent","STATUS_CODES","actualStatusContent","body","isRegExp","text","expectBody","util","inspect","actualBody","test","deepStrictEqual","header","field","actualValue","expectValue","Array","isArray","e","TestAgent","Agent","options","createServer","_ca","ca","_key","key","_cert","cert","host","_host","del","args","delete","request","obj","forEach","req","set","on","_saveCookies","_attachCookies","_setDefaults","agent"],"mappings":"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"}